variable "project_prefix" {
  type        = string
  description = "prefix string put in front of string"
  default     = "f5xc"
}

variable "project_suffix" {
  type        = string
  description = "prefix string put at the end of string"
  default     = "02"
}

variable "f5xc_api_p12_file" {
  type    = string
}

variable "f5xc_api_url" {
  type    = string
}

variable "f5xc_api_token" {
  type    = string
}

variable "f5xc_tenant" {
  type    = string
}

variable "f5xc_namespace" {
  type    = string
  default = "system"
}

variable "f5xc_virtual_k8s_namespace" {
  type    = string
  default = "shared"
}

variable "f5xc_aws_cred" {
  type    = string
  default = "ck-aws-01"
}

variable "f5xc_vk8s_template_filename" {
  type    = string
  default = "workload.tftpl"
}

variable "f5xc_vk8s_workload_filename" {
  type    = string
  default = "workload.yml"
}

variable "f5xc_vk8s_workload_file_path" {
  type    = string
  default = "./_out"
}

variable "f5xc_vk8s_kubeconfig_filename" {
  type    = string
  default = "kubeconf.yml"
}

variable "kubectl_secret_registry_username" {
  type    = string
}

variable "kubectl_secret_registry_username_type" {
  type    = string
  default = "--docker-username"
}

variable "kubectl_secret_registry_password" {
  type      = string
  sensitive = true
}

variable "kubectl_secret_registry_password_type" {
  type    = string
  default = "--docker-password"
}

variable "kubectl_secret_registry_email" {
  type    = string
}

variable "kubectl_secret_registry_email_type" {
  type    = string
  default = "--docker-email"
}

variable "kubectl_secret_name" {
  type    = string
  default = "regcred"
}

variable "kubectl_secret_registry_type" {
  type    = string
  default = "docker-registry"
}

variable "kubectl_secret_registry_server_type" {
  type    = string
  default = "--docker-server"
}

variable "kubectl_secret_registry_server_name" {
  type    = string
  default = "docker.io"
}

locals {
  f5xc_vk8s_template_file_path   = format("%s/%s", path.module, "templates")
  f5xc_vk8s_kubeconfig_file_path = format("%s/%s", path.module, "_out")
  workload_content               = templatefile(format("%s/%s", local.f5xc_vk8s_template_file_path, var.f5xc_vk8s_template_filename), {
    namespace = var.f5xc_virtual_k8s_namespace
  })
}

provider "volterra" {
  api_p12_file = var.f5xc_api_p12_file
  url          = var.f5xc_api_url
  alias        = "default"
}

module "vk8s" {
  source         = "./modules/f5xc/v8ks"
  f5xc_tenant    = var.f5xc_tenant
  f5xc_api_url   = var.f5xc_api_url
  f5xc_api_token = var.f5xc_api_token
  f5xc_namespace = var.f5xc_virtual_k8s_namespace
  f5xc_vk8s_name = format("%s-vk8s-%s", var.project_prefix, var.project_suffix)
  providers      = {
    volterra = volterra.default
  }
}

module "credential" {
  source                     = "./modules/f5xc/api-credential"
  f5xc_tenant                = var.f5xc_tenant
  f5xc_api_url               = var.f5xc_api_url
  f5xc_api_token             = var.f5xc_api_token
  f5xc_namespace             = var.f5xc_namespace
  f5xc_virtual_k8s_name      = module.vk8s.vk8s["name"]
  f5xc_api_credential_type   = "KUBE_CONFIG"
  f5xc_api_credentials_name  = format("%s-vk8s-credential-%s", var.project_prefix, var.project_suffix)
  f5xc_virtual_k8s_namespace = var.f5xc_virtual_k8s_namespace
}

resource "local_file" "workload" {
  content  = local.workload_content
  filename = format("%s/%s", var.f5xc_vk8s_workload_file_path, var.f5xc_vk8s_workload_filename)
}

resource "local_file" "kubeconfig" {
  content  = base64decode(module.credential.api_credential["data"])
  filename = format("%s/%s", local.f5xc_vk8s_kubeconfig_file_path, var.f5xc_vk8s_kubeconfig_filename)
}

module "vk8s_wait_for_online" {
  depends_on = [module.vk8s]
  source         = "./modules/f5xc/status/vk8s"
  f5xc_api_token = var.f5xc_api_token
  f5xc_api_url   = var.f5xc_api_url
  f5xc_namespace = var.f5xc_virtual_k8s_namespace
  f5xc_tenant    = var.f5xc_tenant
  f5xc_vk8s_name = format("%s-vk8s-%s", var.project_prefix, var.project_suffix)
}

resource "null_resource" "apply_credentials" {
  depends_on = [module.vk8s_wait_for_online, local_file.kubeconfig]
  triggers   = {
    kubectl_secret_registry_type          = var.kubectl_secret_registry_type
    kubectl_secret_registry_server_type   = var.kubectl_secret_registry_server_type
    kubectl_secret_registry_server_name   = var.kubectl_secret_registry_server_name
    kubectl_secret_name                   = var.kubectl_secret_name
    kubectl_secret_registry_username      = var.kubectl_secret_registry_username
    kubectl_secret_registry_username_type = var.kubectl_secret_registry_username_type
    kubectl_secret_registry_password      = var.kubectl_secret_registry_password
    kubectl_secret_registry_password_type = var.kubectl_secret_registry_password_type
    kubectl_secret_registry_email         = var.kubectl_secret_registry_email#
    kubectl_secret_registry_email_type    = var.kubectl_secret_registry_email_type
  }
  provisioner "local-exec" {
    command     = "kubectl create secret ${self.triggers.kubectl_secret_registry_type} ${self.triggers.kubectl_secret_name} ${self.triggers.kubectl_secret_registry_server_type}=${self.triggers.kubectl_secret_registry_server_name} ${self.triggers.kubectl_secret_registry_password_type}=${self.triggers.kubectl_secret_registry_password} ${self.triggers.kubectl_secret_registry_username_type}=${self.triggers.kubectl_secret_registry_username} ${self.triggers.kubectl_secret_registry_email_type}=${self.triggers.kubectl_secret_registry_email} --namespace=${var.f5xc_virtual_k8s_namespace}"
    environment = {
      KUBECONFIG = format("%s/%s", local.f5xc_vk8s_kubeconfig_file_path, var.f5xc_vk8s_kubeconfig_filename)
    }
  }
}

output "kube_config" {
  value     = base64decode(module.credential.api_credential["data"])
  sensitive = true
}

output "workload_config" {
  value = local.workload_content
}

