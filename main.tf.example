variable "project_prefix" {
  type        = string
  description = "prefix string put in front of string"
  default     = "f5xc"
}

variable "project_suffix" {
  type        = string
  description = "prefix string put at the end of string"
  default     = "01"
}

variable "f5xc_api_p12_file" {
  type = string
}

variable "f5xc_api_url" {
  type = string
}

variable "f5xc_api_token" {
  type = string
}

variable "f5xc_tenant" {
  type    = string
}

variable "f5xc_namespace" {
  type    = string
  default = "system"
}

variable "f5xc_vsite_refs_namespace" {
  type    = string
  default = "shared"
}

variable "f5xc_vk8s_template_filename" {
  type    = string
  default = "workload.tftpl"
}

variable "f5xc_vk8s_workload_filename" {
  type    = string
  default = "workload.yml"
}

variable "f5xc_vk8s_workload_file_path" {
  type    = string
  default = "./_out"
}

variable "f5xc_vk8s_kubeconfig_filename" {
  type    = string
  default = "kubeconf.yml"
}

variable "kubectl_secret_registry_username" {
  type = string
}

variable "kubectl_secret_registry_username_type" {
  type    = string
  default = "--docker-username"
}

variable "kubectl_secret_registry_password" {
  type      = string
  sensitive = true
}

variable "kubectl_secret_registry_password_type" {
  type    = string
  default = "--docker-password"
}

variable "kubectl_secret_registry_email" {
  type = string
}

variable "kubectl_secret_registry_email_type" {
  type    = string
  default = "--docker-email"
}

variable "kubectl_secret_name" {
  type    = string
  default = "regcred"
}

variable "kubectl_secret_registry_type" {
  type    = string
  default = "docker-registry"
}

variable "kubectl_secret_registry_server_type" {
  type    = string
  default = "--docker-server"
}

variable "kubectl_secret_registry_server_name" {
  type    = string
  default = "docker.io"
}

locals {
  f5xc_vk8s_template_file_path   = format("%s/%s", path.module, "templates")
  f5xc_vk8s_kubeconfig_file_path = format("%s/%s", path.module, "_out")
  workload_content               = templatefile(format("%s/%s", local.f5xc_vk8s_template_file_path, var.f5xc_vk8s_template_filename), {
    namespace = var.f5xc_namespace
  })
}

provider "volterra" {
  api_p12_file = var.f5xc_api_p12_file
  url          = var.f5xc_api_url
  alias        = "default"
}

module "f5xc_namespace" {
  source                        = "./modules/f5xc/namespace"
  f5xc_namespace_name           = format("%s-namespace-vk8s-%s", var.project_prefix, var.project_suffix)
  f5xc_namespace_create_timeout = "20s"
  providers                     = {
    volterra = volterra.default
  }
}

/*
module "f5xc_virtual_site" {
  source                                = "./modules/f5xc/site/virtual"
  f5xc_namespace                        = "shared"
  f5xc_virtual_site_name                = format("%s-regression-vk8s-%s", var.project_prefix, var.project_suffix)
  f5xc_virtual_site_type                = "CUSTOMER_EDGE"
  f5xc_virtual_site_selector_expression = ["site_mesh_group in (regression-sites)"]
  providers                             = {
    volterra = volterra.default
  }
}

module "vk8s_inline" {
  source                     = "./modules/f5xc/v8ks"
  f5xc_tenant                = var.f5xc_tenant
  f5xc_api_url               = var.f5xc_api_url
  f5xc_api_token             = var.f5xc_api_token
  f5xc_vk8s_name             = format("%s-vk8s-inline-%s", var.project_prefix, var.project_suffix)
  f5xc_create_k8s_creds      = true
  f5xc_virtual_k8s_name      = module.vk8s_reference.vk8s["name"]
  f5xc_virtual_site_refs     = [module.f5xc_virtual_site.virtual-site["name"]]
  f5xc_vsite_refs_namespace  = var.f5xc_vsite_refs_namespace
  f5xc_virtual_k8s_namespace = module.f5xc_namespace.namespace["name"]
  f5xc_k8s_credentials_name  = format("%s-vk8s-inline-creds-%s", var.project_prefix, var.project_suffix)
  providers                  = {
    volterra = volterra.default
  }
}

output "kube_config_inline" {
  value = module.vk8s_inline.vk8s["k8s_conf"]
  # sensitive = true
}
*/

module "vk8s_reference" {
  source                     = "./modules/f5xc/v8ks"
  f5xc_tenant                = var.f5xc_tenant
  f5xc_api_url               = var.f5xc_api_url
  f5xc_api_token             = var.f5xc_api_token
  f5xc_vk8s_name             = format("%s-vk8s-reference-%s", var.project_prefix, var.project_suffix)
  f5xc_virtual_site_refs     = ["virtual-site-a", "virtual-site-b"]
  f5xc_vsite_refs_namespace  = var.f5xc_vsite_refs_namespace
  f5xc_virtual_k8s_namespace = module.f5xc_namespace.namespace["name"]
  providers                  = {
    volterra = volterra.default
  }
}

module "credential_by_reference" {
  source                     = "./modules/f5xc/api-credential"
  f5xc_tenant                = var.f5xc_tenant
  f5xc_api_url               = var.f5xc_api_url
  f5xc_api_token             = var.f5xc_api_token
  f5xc_virtual_k8s_name      = module.vk8s_reference.vk8s["name"]
  f5xc_api_credential_type   = "KUBE_CONFIG"
  f5xc_api_credentials_name  = format("%s-vk8s-credential-%s", var.project_prefix, var.project_suffix)
  f5xc_virtual_k8s_namespace = module.f5xc_namespace.namespace["name"]
}

/*resource "local_file" "workload_reference" {
  depends_on = [module.vk8s_reference.vk8s]
  content    = local.workload_content
  filename   = format("%s/%s", var.f5xc_vk8s_workload_file_path, var.f5xc_vk8s_workload_filename)
}

resource "local_file" "kubeconfig_reference" {
  depends_on = [module.credential_by_reference.api_credential]
  content    = module.credential_by_reference.api_credential["k8s_conf"]
  filename   = format("%s/%s", local.f5xc_vk8s_kubeconfig_file_path, var.f5xc_vk8s_kubeconfig_filename)
}

resource "null_resource" "apply_credentials" {
  depends_on = [module.vk8s_reference, local_file.kubeconfig_reference]
  triggers   = {
    kubectl_secret_name                   = var.kubectl_secret_name
    kubectl_secret_registry_type          = var.kubectl_secret_registry_type
    kubectl_secret_registry_server_type   = var.kubectl_secret_registry_server_type
    kubectl_secret_registry_server_name   = var.kubectl_secret_registry_server_name
    kubectl_secret_registry_username      = var.kubectl_secret_registry_username
    kubectl_secret_registry_username_type = var.kubectl_secret_registry_username_type
    kubectl_secret_registry_password      = var.kubectl_secret_registry_password
    kubectl_secret_registry_password_type = var.kubectl_secret_registry_password_type
    kubectl_secret_registry_email         = var.kubectl_secret_registry_email
    kubectl_secret_registry_email_type    = var.kubectl_secret_registry_email_type
  }

  provisioner "local-exec" {
    command     = "kubectl create secret ${self.triggers.kubectl_secret_registry_type} ${self.triggers.kubectl_secret_name} ${self.triggers.kubectl_secret_registry_server_type}=${self.triggers.kubectl_secret_registry_server_name} ${self.triggers.kubectl_secret_registry_password_type}=${self.triggers.kubectl_secret_registry_password} ${self.triggers.kubectl_secret_registry_username_type}=${self.triggers.kubectl_secret_registry_username} ${self.triggers.kubectl_secret_registry_email_type}=${self.triggers.kubectl_secret_registry_email} --namespace=shared"
    environment = {
      KUBECONFIG = format("%s/%s", local.f5xc_vk8s_kubeconfig_file_path, var.f5xc_vk8s_kubeconfig_filename)
    }
  }
}*/

/*resource "null_resource" "apply_workload" {
  depends_on = [null_resource.apply_credentials, local_file.kubeconfig, local_file.template]
  triggers   = {
    manifest_sha1 = sha1(local.template_content)
  }
  provisioner "local-exec" {
    command     = format("kubectl apply -f _output/demo.yml --namespace=%s", var.f5xc_namespace)
    environment = {
      KUBECONFIG = format("%s/_output/ves-ns-01-vk8s.yaml", path.root)
    }
  }
  provisioner "local-exec" {
    when        = destroy
    command     = "kubectl delete -f _output/demo.yml --ignore-not-found=true"
    environment = {
      KUBECONFIG = format("%s/_output/ves-ns-01-vk8s.yaml", path.root)
    }
    on_failure = continue
  }
}*/

output "response_api_certificate" {
  value = {
    "name" = module.credential_by_reference.api_credential["name"]
    "type" = module.credential_by_reference.api_credential["type"]
  }
}

/*output "kube_config_reference" {
  value     = module.credential_by_reference.api_credential["k8s_conf"]
  sensitive = false
}

output "workload_config_reference" {
  value = local.workload_content
}*/